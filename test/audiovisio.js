// This file is GENERATED by the audiovisio tool
	// It will be overwritten each time you run the tool with your configuration.
	
	var current = 1;
	
	function play	(id) {
		current = id;
		let slide = slides().get(id);
		if (slide === undefined) {
			console.log("no such slide id", id);
			return
		}
		let pauseMS = slide.pause_before;
		console.log("play slide id", id)
	
		let watch = document.getElementById("watch");
		watch.hidden = true;
	
		let img = document.getElementById("image_holder");
		img.src = slide.visio;
	
		let aud = document.getElementById("audio_holder");
		aud.hidden = false;
	
		let source = document.getElementById("audio_source");
		source.src = slide.audio;
		aud.load();
	
		sleep(pauseMS).then(() => {
			console.log("done before audio pause", pauseMS)
			var playPromise = aud.play();
			// In browsers that don’t yet support this functionality,
			// playPromise won’t be defined.
			if (playPromise !== undefined) {
				playPromise.then(function () {
				}).catch(function (error) {
					// Re-playback failed.
					console.log("failed to re-play", error);
				});
			}
		});
	}
	
	function play_next() {
		let slide = slides().get(current)
		let pauseMS = slide.pause_after;
		if (slide === undefined) {
			console.log("no such slide id", current)
			return
		}
		sleep(pauseMS).then(() => {
			console.log("done after audio pause", pauseMS)
			let next = slide.next
			if (next === undefined || next.length === 0) {
				end_presentation();
				return;
			}
			play(next);
		});
	}
	
	function end_presentation() {
		let img = document.getElementById("image_holder");
		img.src = "trailer.png";
	
		let watch = document.getElementById("watch");
		watch.hidden = false;
	
		let aud = document.getElementById("audio_holder");
		// do not empty the src field
		aud.hidden = true;
	}
	
	// return a promise that resolves after ms milliseconds, if given.
	function sleep(ms) {
		if (ms === undefined || ms <= 0) {
			return Promise.resolve();
		}
		return new Promise(resolve => setTimeout(resolve, ms));
	}	
